INSERT INTO "table" VALUES(replace('CREATE TABLE __diesel_schema_migrations (\n       version VARCHAR(50) PRIMARY KEY NOT NULL,\n       run_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE windows (\n  id INTEGER PRIMARY KEY NOT NULL,\n  active_tab_index INTEGER NOT NULL CHECK (active_tab_index >= 0),\n  window_width FLOAT CHECK (window_width >= 0),\n  window_height FLOAT CHECK (window_height >= 0),\n  origin_x FLOAT,\n  origin_y FLOAT, quake_mode BOOLEAN NOT NULL DEFAULT FALSE, universal_search_width FLOAT CHECK (universal_search_width >= 0), warp_ai_width FLOAT CHECK (warp_ai_width >= 0), voltron_width FLOAT CHECK (voltron_width >= 0), warp_drive_index_width FLOAT CHECK (warp_drive_index_width >= 0), fullscreen_state INTEGER NOT NULL DEFAULT 0,\n  CONSTRAINT Bound_integrity CHECK (\n    COALESCE(window_width, window_height, origin_x, origin_y) IS NOT NULL\n    OR COALESCE(window_width, window_height, origin_x, origin_y) IS NULL\n  )\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE tabs (\n  id INTEGER PRIMARY KEY NOT NULL,\n  window_id INTEGER NOT NULL, custom_title TEXT, color TEXT,\n  FOREIGN KEY(window_id) REFERENCES windows(id)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE pane_nodes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  tab_id INTEGER NOT NULL REFERENCES tabs(id),\n  parent_pane_node_id INTEGER REFERENCES pane_nodes(id),\n  flex FLOAT,\n  is_leaf BOOLEAN NOT NULL,\n  CONSTRAINT root_or_has_parent CHECK (\n	parent_pane_node_id IS NULL AND flex IS NULL\n	OR parent_pane_node_id IS NOT NULL AND flex IS NOT NULL\n  )\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE pane_branches (\n  id INTEGER PRIMARY KEY NOT NULL,\n  pane_node_id INTEGER NOT NULL UNIQUE REFERENCES pane_nodes(id),\n  horizontal BOOLEAN NOT NULL\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE blocks (\n    id INTEGER PRIMARY KEY,\n    pane_leaf_uuid BLOB NOT NULL,\n    stylized_command BLOB NOT NULL,\n    stylized_output BLOB NOT NULL,\n    pwd TEXT,\n    git_branch TEXT,\n    virtual_env TEXT,\n    conda_env TEXT,\n    exit_code INTEGER NOT NULL,\n    did_execute BOOLEAN NOT NULL\n, completed_ts DATETIME, start_ts DATETIME, ps1 TEXT, honor_ps1 BOOLEAN NOT NULL DEFAULT FALSE, shell TEXT, user TEXT, host TEXT, is_background BOOLEAN NOT NULL DEFAULT false, rprompt TEXT, prompt_snapshot TEXT, block_id TEXT NOT NULL DEFAULT "", ai_metadata TEXT, is_local BOOLEAN)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE app (\n    id INTEGER PRIMARY KEY,\n    active_window_id INTEGER REFERENCES windows(id)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE users (\n   id INTEGER NOT NULL PRIMARY KEY,\n   firebase_uid  TEXT NOT NULL UNIQUE\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE workflows (\n    id INTEGER NOT NULL PRIMARY KEY,\n    -- Diesel does not let you specify JSON as data type\n    data TEXT NOT NULL)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE notebooks (\n  id INTEGER NOT NULL PRIMARY KEY,\n  title TEXT,\n  data TEXT)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE folders (\n    id INTEGER NOT NULL PRIMARY KEY,\n    name TEXT NOT NULL,\n    is_open BOOLEAN NOT NULL\n, is_warp_pack BOOLEAN NOT NULL DEFAULT FALSE)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE "object_metadata" (\n    id INTEGER NOT NULL PRIMARY KEY,\n    is_pending BOOLEAN NOT NULL,\n    object_type TEXT NOT NULL,\n    revision_ts INTEGER,\n    server_id TEXT,\n    client_id TEXT,\n    shareable_object_id INTEGER NOT NULL,\n    author_id INTEGER,\n    retry_count INTEGER NOT NULL,\n    metadata_last_updated_ts BIGINTEGER,\n    trashed_ts BIGINTEGER,\n    folder_id TEXT\n, is_welcome_object BOOLEAN NOT NULL DEFAULT false, creator_uid TEXT, last_editor_uid TEXT, current_editor TEXT)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE commands (\n    id INTEGER NOT NULL PRIMARY KEY,\n    command TEXT NOT NULL,\n    exit_code INTEGER,\n    start_ts DATETIME,\n    completed_ts DATETIME,\n    pwd TEXT,\n    shell TEXT,\n    username TEXT,\n    hostname TEXT,\n    session_id BIGINTEGER,\n    git_branch TEXT,\n    cloud_workflow_id TEXT\n, workflow_command TEXT)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE "pane_leaves" (\n    pane_node_id INTEGER NOT NULL UNIQUE REFERENCES pane_nodes(id),\n    -- This does not have a CHECK constraint because, when we add new kinds of panes in the future,\n    -- it''s difficult to update the constraint.\n    kind TEXT NOT NULL,\n    is_focused BOOLEAN NOT NULL DEFAULT FALSE,\n\n    PRIMARY KEY (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE terminal_panes (\n    id INTEGER PRIMARY KEY NOT NULL,\n    kind TEXT NOT NULL DEFAULT ''terminal'' CHECK (kind = ''terminal''),\n\n    uuid BLOB NOT NULL UNIQUE,\n    cwd TEXT,\n    is_active BOOLEAN NOT NULL DEFAULT FALSE, shell_launch_data TEXT, input_config TEXT,\n\n    FOREIGN KEY (id, kind) REFERENCES "pane_leaves"(pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE notebook_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''notebook'' CHECK (kind = ''notebook''),\n\n  -- The sync ID of the notebook. This may be null if the notebook has not yet been saved.\n  notebook_id TEXT, local_path BLOB,\n  \n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE user_profiles (\n    firebase_uid TEXT NOT NULL PRIMARY KEY,\n    photo_url TEXT NOT NULL,\n    email TEXT NOT NULL,\n    display_name TEXT\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE cloud_objects_refreshes (\n  id INTEGER PRIMARY KEY NOT NULL, time_of_next_refresh DATETIME NOT NULL)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE generic_string_objects (\n    id INTEGER NOT NULL PRIMARY KEY,\n    data TEXT NOT NULL\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE object_actions (\n  id INTEGER PRIMARY KEY NOT NULL,\n  hashed_object_id TEXT NOT NULL,\n  timestamp DATETIME,\n  -- An enum here would be overly restrictive for future action types.\n  action TEXT NOT NULL,\n  data TEXT,\n  count INTEGER,\n  oldest_timestamp DATETIME,\n  latest_timestamp DATETIME,\n  pending BOOLEAN\n, processed_at_timestamp DATETIME)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE server_experiments (\n    experiment TEXT PRIMARY KEY NOT NULL\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE env_var_collection_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''env_var_collection'' CHECK (kind = ''env_var_collection''),\n\n  -- The sync ID of the EVC. This may be null if the EVC has not yet been saved.\n  env_var_collection_id TEXT,\n  \n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE code_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''code'' CHECK (kind = ''code''),\n\n  -- The sync ID of the notebook. This may be null if the notebook has not yet been saved.\n  local_path BLOB,\n\n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE workflow_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''workflow'' CHECK (kind = ''workflow''),\n\n  -- The sync ID of the EVC. This may be null if the EVC has not yet been saved.\n  workflow_id TEXT,\n  \n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE "ai_queries" (\n  id INTEGER PRIMARY KEY NOT NULL,\n  exchange_id TEXT NOT NULL,\n  conversation_id TEXT NOT NULL,\n  start_ts DATETIME NOT NULL,\n  -- FOREIGN KEY REFERENCES pane_leaves(uuid) but we don''t mark it as a foreign key because it causes problems with cascading deletes.\n  input TEXT NOT NULL,\n  working_directory TEXT\n, output_status TEXT NOT NULL, model_id TEXT NOT NULL DEFAULT '''', planning_model_id TEXT NOT NULL DEFAULT '''', coding_model_id TEXT NOT NULL DEFAULT '''')','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE ai_blocks (\n    id INTEGER PRIMARY KEY NOT NULL,\n    exchange_id TEXT NOT NULL,\n    -- Would be marked FOREIGN KEY REFERENCES pane_leaves(uuid) but we don''t because we can''t enforce it properly when handling pane removal.\n    pane_leaf_uuid BLOB NOT NULL,\n    output TEXT NOT NULL, is_hidden BOOLEAN NOT NULL DEFAULT FALSE, is_passive_code_gen_block BOOLEAN NOT NULL DEFAULT FALSE,\n    FOREIGN KEY(exchange_id) REFERENCES "ai_queries"(exchange_id)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE current_user_information (\n    email TEXT PRIMARY KEY NOT NULL\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE "object_permissions" (\n  id INTEGER NOT NULL PRIMARY KEY,\n  object_metadata_id INTEGER NOT NULL REFERENCES object_metadata(id) ON DELETE CASCADE,\n  subject_type TEXT NOT NULL,\n  subject_id TEXT,\n  subject_uid TEXT NOT NULL,\n  permissions_last_updated_at BIGINTEGER,\n  object_guests BLOB\n, anyone_with_link_access_level TEXT, anyone_with_link_source BLOB)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE "teams" (\n  id integer NOT NULL PRIMARY KEY,\n  name TEXT NOT NULL,\n  server_uid TEXT NOT NULL UNIQUE\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE workspaces (\n    id integer NOT NULL PRIMARY KEY,\n    name TEXT NOT NULL,\n    server_uid TEXT NOT NULL UNIQUE\n, is_selected BOOLEAN NOT NULL DEFAULT FALSE)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE workspace_teams (\n    id integer NOT NULL PRIMARY KEY,\n    workspace_server_uid TEXT NOT NULL UNIQUE,\n    team_server_uid TEXT NOT NULL UNIQUE,\n    FOREIGN KEY (workspace_server_uid) REFERENCES workspaces (server_uid),\n    FOREIGN KEY (team_server_uid) REFERENCES teams (server_uid)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE settings_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''settings'' CHECK (kind = ''settings''),\n\n  current_page TEXT NOT NULL DEFAULT ''Account'',\n\n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE ai_memory_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''ai_memory'' CHECK (kind = ''ai_memory''),\n\n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE mcp_server_panes (\n  id INTEGER PRIMARY KEY NOT NULL,\n  kind TEXT NOT NULL DEFAULT ''mcp_server'' CHECK (kind = ''mcp_server''),\n\n  FOREIGN KEY (id, kind) REFERENCES pane_leaves (pane_node_id, kind)\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE last_ai_conversations (\n     id INTEGER PRIMARY KEY NOT NULL,\n     conversation_id TEXT NOT NULL,\n     exchanges TEXT NOT NULL,\n     phase TEXT NOT NULL,\n     has_dispatched_plan BOOLEAN NOT NULL,\n     pane_leaf_uuid BLOB NOT NULL\n )','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE codebase_index_metadata (\n    repo_path TEXT NOT NULL PRIMARY KEY,\n    navigated_ts DATETIME,\n    modified_ts DATETIME,\n    queried_ts DATETIME\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE mcp_environment_variables (\n    mcp_server_uuid BLOB PRIMARY KEY NOT NULL,\n    environment_variables TEXT NOT NULL\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE agent_conversations (\n    id INTEGER PRIMARY KEY NOT NULL,\n    conversation_id TEXT NOT NULL,\n    active_task_id TEXT,\n    conversation_data TEXT NOT NULL,\n    last_modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n)','\n',char(10)));
INSERT INTO "table" VALUES(replace('CREATE TABLE agent_tasks (\n    id INTEGER PRIMARY KEY NOT NULL,\n    conversation_id TEXT NOT NULL,\n    task_id TEXT NOT NULL,\n    task BLOB NOT NULL,\n    last_modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (conversation_id) REFERENCES agent_conversations (conversation_id)\n)','\n',char(10)));
